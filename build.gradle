// Assembles a Vertx deployment
buildscript {
	ext {
		//
	}
    repositories {
        mavenCentral()
		// Wermutstropfen: die Plugins können nicht in die einzelnen Profile verlagert werden..
		gradlePluginPortal()
    }
	dependencies {
		classpath "com.github.node-gradle:gradle-node-plugin:3.2.1" // TODO: move to conventions plugin
		classpath "com.palantir.gradle.docker:gradle-docker:0.33.0"
	}
}

plugins {
	id 'application'
	id 'distribution'
	//id 'tecfox.java-conventions' // draws in 'java-library', which is not wanted in root project!
	id 'tecfox.node-conventions'
}

// Apply the 'profile' ..
if (!hasProperty('buildProfile')) ext.buildProfile = 'default'
apply from: "profile-${buildProfile}.gradle"

apply plugin: 'com.palantir.docker'

ext {
	apiVersion = 'v1.0' // Should reflect the version of the API
	jsonSchemaFilePath = 'webapp/dist/timefox-client.json'
	apiFilePath = "src/main/resources/api/${project.version}/"
}

version ext.apiVersion

// 'yarn_cache_clean' is defined in tecfox.node-conventions.gradle; pls. exec this task 
// prior to running the yarn tasks, because author did not have time..
task npm_update(type: NpmTask, dependsOn: yarn_cache_clean) {
	group = 'build'
	description = 'Refresh the NPM cache acc. to package.json'
	args = ['install', '--loglevel', 'warn']
}

task clear_generated_json(type: Delete){
	group = 'generation'
	delete "${jsonSchemaFilePath}"
}

task yarn_compile_json_generator(type: YarnTask, dependsOn: 'yarn') {
	group = 'generation'
	description = 'Compile the JS programm that will generate the JSON schema (timefox-json.js)'
	args = ['run', 'compile-json-generator']
}

// Memento: Actually, the 'yarn_compile_json_generator' task should be called prior, butt..
task yarn_generate_json(type: YarnTask, dependsOn: ['yarn','clear_generated_json']) {
	group = 'generation'
	description = 'Generate JSON schema'
	args = ['run','generate-json-schema']
}

//task npx_generate_json_schema(type: NpxTask) {
//	dependsOn clear_gen_json
//	group = 'generation'
//	description = 'Generate JSON schema'
//	command = "json-schema-generator"
//	args = ['souce/timefox-client.json','-o',"${jsonSchemaFilePath}"]
//	command = "json-schema-generator"
//	args = ['src/Record/Entity.ts','-o',"${jsonSchemaFilePath}",'TimeRecord']
//}

task yarn_clear_generated_sources(type: YarnTask, dependsOn: ['yarn']) {
	group = 'generation'
	description = 'Generate the client code (TS)'
	args = ['run', 'clean-generated-sources']
}

// The 'openapi-generator-cli' eventually deletes the input YAML, so this is a work-around..
task copy_apifile_tmp(type: Copy) {
	group 'generation'
	from "${apiFilePath}"
	include "*"
	into 'webapp/tmp'
}

task yarn_generate_client_jersey(type: YarnTask, dependsOn: ['yarn','copy_apifile_tmp']) {
	group = 'generation'
	description = 'Generate the client code (TS)'
	args = ['run', 'generate-client-jersey']
}

task yarn_generate_client_spring(type: YarnTask, dependsOn: ['yarn','copy_apifile_tmp']) {
	group = 'generation'
	description = 'Generate the client code (TS)'
	args = ['run', 'generate-client-spring']
}

task yarn_generate_client_ruby(type: YarnTask, dependsOn: ['yarn','copy_apifile_tmp']) {
	group = 'generation'
	description = 'Generate the client code (TS)'
	args = ['run', 'generate-client-ruby']
}

task yarn_generate_client_graphql(type: YarnTask, dependsOn: ['yarn','copy_apifile_tmp']) {
	group = 'generation'
	description = 'Generate the client code (TS)'
	args = ['run', 'generate-client-graphql']
}

docker {
    name "tecfox.eu/timefox:${project.version}"
   files file("build/distributions/timefox-backend-polyglott-${project.version}.tar.gz"), 'install.sh'
    buildArgs([ZIP_FILE_NAME: "timefox-backend-polyglott-${project.version}.tar.gz", APP_USER: 'vertx', PASS_WORD: 'tecfox#007'])
    labels(['version': "${project.version}"])
    //load
}

docker.dependsOn assemble