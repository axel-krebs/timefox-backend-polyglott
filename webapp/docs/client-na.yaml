openapi: 3.1.0
info:
  version: 1.0.0
  title: Timefox Client API
  license:
    name: MIT
servers:
- url: http://timefox.swagger.io/v1
paths:
  /loadRange/{startDate}/{endDate}:
    get:
      tags: range
      summary: Loads a range from start date to end date
      operationId: loadRange
      parameters:
      - name: startDate
        in: path
        description: The startDate
        required: true
        schema:
          type: string
          format: date-time
responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Entity'
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          '400':
            description: Invalid startDate or endDate supplied
          '404':
            description: Range not valid
        security:
        - api_key: [
            ]
  /loadRecord/{date}:
    get:
      tags: record
    summary: Loads a record for a given date
    operationId: loadRecord
    parameters:
    - name: date
      in: path
      description: The date
      required: true
      schema:
        type: string
        format: date-time
    responses:
      '200':
        description: successful operation
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Entity'
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        '400':
          description: Invalid startDate or endDate supplied
        '404':
          description: Range not valid
      security:
      - api_key: [
          ]
    /createRecord:
      post:
        tags:
        - record
        summary: Created record
        description: This can only be done by the logged in user.
        operationId: createRecord
        responses:
          '400':
            description: Invalid record supplied
        security:
        - api_key: [
            ]
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Created record object
          required: true
    /updateRecord:
      put:
        tags:
        - record
        summary: Updated record
        description: This can only be done by the logged in user.
        operationId: updateRecord
        responses:
          '400':
            description: Invalid record supplied
          '404':
            description: Record not found
        security:
        - api_key: [
            ]
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Updated record object
          required: true
components:
  schemas:
    TimeRecord:
      type: object
      items:
        hours: number
        issue: string
        text: string
    Entity:
      type: object
      items:
        date:
          type: string
          format: date
        timeRecords:
          type: array
          items:
            $ref: '#/components/schemas/TimeRecord'
    Error:
      required:
      - code
      - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string